lexer and parser
===========================

floating points:
	better parsing. currently all interpreted as doubles and then truncated
integers:
	add support for storage sizes and signed types
chars and strings:
	wide characters, L and u prefixes
declarations:
	better matching (pointers, etc)
	arrays with size given by an expression such as 4*4 instead of constant value
	InitialiserList should work with nested braces such as {{1, 2}, {3, 4}}
structs and unions:
	recognise as type instead of variable name
	allow in type name declarations
	implement sizeof
enum:
	implement
	recognise as type name
function calls:
	allow more than just calling by identifier
	e.g. pointer to a function
	parameter list in function declarations (...)


testing
===========================

test json lexer:
 - is the resulting json parse-able?
 - are arbitrary strings escaped correctly in the json?
 - do the tokens that need to be recognised get recognised?
 - do invalid symbols get rejected?
 - are the line numbers, file names, and columns correct?
 - are multi-char symbols split correctly? e.g. +, ++
 - is whitespace handled correctly? e.g. (x=2) versus (longintx)
 *
 - php script to generate random C tokens
 - php to check the json output and see if it matches what was intended
